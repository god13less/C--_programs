void DFS（int deep）
{
	if（符合...条件||已经不能再搜了）//终止条件
	{
		执行一些操作。
		return;
	}
	if（符合某种条件且有地方可以继续搜索的）//根据情况可能会需要循环
	{
		执行一些操作。
		进行一些标记。//标志该节点被访问过
		DFS（deep+1）；
		标记复原。//用于回溯
	}
}

void BFS（节点1）{
	对节点1进行赋值。
	queue<> q；// 定义一个队列
	q.push(节点1)；//节点入队
	while(!q.empty()){//当队列不为空时，一直搜索
		节点2=q.front();//将节点1的信息赋给节点2
		q.pop();//队首出队
		找邻节点，得到一些信息，可以执行一些操作，并标记访问，将邻接点入队
	}
}

function recursion(大规模){
    if (end_condition){      // 明确的递归终止条件


        return;
    }else{
        recursion(小规模);     // 递到最深处后，不断地归来
    }
}